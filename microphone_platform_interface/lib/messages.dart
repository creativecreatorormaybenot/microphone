// Autogenerated from Pigeon (v0.1.14), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import
// @dart = 2.8
import 'dart:async';
import 'package:flutter/services.dart';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

class IdMessage {
  int recorderId;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['recorderId'] = recorderId;
    return pigeonMap;
  }

  // ignore: unused_element
  static IdMessage _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final IdMessage result = IdMessage();
    result.recorderId = pigeonMap['recorderId'];
    return result;
  }
}

class RecordingMessage {
  String url;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['url'] = url;
    return pigeonMap;
  }

  // ignore: unused_element
  static RecordingMessage _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final RecordingMessage result = RecordingMessage();
    result.url = pigeonMap['url'];
    return result;
  }
}

class MicrophoneApi {
  Future<IdMessage> create() async {
    const BasicMessageChannel<dynamic> channel = BasicMessageChannel<dynamic>(
        'dev.flutter.pigeon.MicrophoneApi.create', StandardMessageCodec());

    final Map<dynamic, dynamic> replyMap = await channel.send(null);
    if (replyMap == null) {
      throw PlatformException(
          code: 'channel-error',
          message: 'Unable to establish connection on channel.',
          details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IdMessage._fromMap(replyMap['result']);
    }
  }

  Future<void> start(IdMessage arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel = BasicMessageChannel<dynamic>(
        'dev.flutter.pigeon.MicrophoneApi.start', StandardMessageCodec());

    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
          code: 'channel-error',
          message: 'Unable to establish connection on channel.',
          details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      // noop
    }
  }

  Future<RecordingMessage> stop(IdMessage arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel = BasicMessageChannel<dynamic>(
        'dev.flutter.pigeon.MicrophoneApi.stop', StandardMessageCodec());

    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
          code: 'channel-error',
          message: 'Unable to establish connection on channel.',
          details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return RecordingMessage._fromMap(replyMap['result']);
    }
  }

  Future<void> dispose(IdMessage arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel = BasicMessageChannel<dynamic>(
        'dev.flutter.pigeon.MicrophoneApi.dispose', StandardMessageCodec());

    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
          code: 'channel-error',
          message: 'Unable to establish connection on channel.',
          details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      // noop
    }
  }
}

abstract class TestMicrophoneApi {
  IdMessage create();
  void start(IdMessage arg);
  RecordingMessage stop(IdMessage arg);
  void dispose(IdMessage arg);
  static void setup(TestMicrophoneApi api) {
    {
      const BasicMessageChannel<dynamic> channel = BasicMessageChannel<dynamic>(
          'dev.flutter.pigeon.MicrophoneApi.create', StandardMessageCodec());
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((dynamic message) async {
          final IdMessage output = api.create();
          return <dynamic, dynamic>{'result': output._toMap()};
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel = BasicMessageChannel<dynamic>(
          'dev.flutter.pigeon.MicrophoneApi.start', StandardMessageCodec());
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage =
              message as Map<dynamic, dynamic>;
          final IdMessage input = IdMessage._fromMap(mapMessage);
          api.start(input);
          return <dynamic, dynamic>{};
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel = BasicMessageChannel<dynamic>(
          'dev.flutter.pigeon.MicrophoneApi.stop', StandardMessageCodec());
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage =
              message as Map<dynamic, dynamic>;
          final IdMessage input = IdMessage._fromMap(mapMessage);
          final RecordingMessage output = api.stop(input);
          return <dynamic, dynamic>{'result': output._toMap()};
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel = BasicMessageChannel<dynamic>(
          'dev.flutter.pigeon.MicrophoneApi.dispose', StandardMessageCodec());
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage =
              message as Map<dynamic, dynamic>;
          final IdMessage input = IdMessage._fromMap(mapMessage);
          api.dispose(input);
          return <dynamic, dynamic>{};
        });
      }
    }
  }
}
